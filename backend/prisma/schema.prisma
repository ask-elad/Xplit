  // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id         Int @default(autoincrement()) @id
//   username   String @unique
//   password   String
// }

// schema.prisma

// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  username      String          @unique
  password      String

  createdTrips  Trip[]          @relation("CreatedTrips")
  expensesPaid  Expense[]       @relation("PaidExpenses")
  tripLinks     TripParticipant[]
  expenseShares ExpenseShare[]
  balancesFrom  Balance[]       @relation("FromUser")
  balancesTo    Balance[]       @relation("ToUser")
}

model Trip {
  id               Int              @id @default(autoincrement())
  name             String
  createdBy        User             @relation("CreatedTrips", fields: [createdById], references: [id])
  createdById      Int

  participantLinks TripParticipant[]
  expenses         Expense[]
  balances         Balance[]
}

model TripParticipant {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  trip     Trip   @relation(fields: [tripId], references: [id])
  tripId   Int
}

model Expense {
  id           Int            @id @default(autoincrement())
  description  String
  amount       Float
  paidBy       User           @relation("PaidExpenses", fields: [paidById], references: [id])
  paidById     Int
  trip         Trip?          @relation(fields: [tripId], references: [id])
  tripId       Int?
  splitEqual   Boolean        @default(true)
  date         DateTime       @default(now())

  participants ExpenseShare[]
}

model ExpenseShare {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  expense    Expense  @relation(fields: [expenseId], references: [id])
  expenseId  Int
  share      Float
}

model Balance {
  id      Int     @id @default(autoincrement())
  from    User    @relation("FromUser", fields: [fromId], references: [id])
  fromId  Int
  to      User    @relation("ToUser", fields: [toId], references: [id])
  toId    Int
  amount  Float
  trip    Trip?   @relation(fields: [tripId], references: [id])
  tripId  Int?
}
